#!/usr/bin/env python

import sys
import os
import string
import re

Chunk_Header_Pat = re.compile('@@ -([0-9]+)(?:,([0-9]+))? \+([0-9]+)(?:,([0-9]+))? @@')

class struct:
  pass
  
def parse_chunk_header(s):
  orig_L, del_N, new_L, add_N = Chunk_Header_Pat.match(s).groups()
  if del_N is None:
    del_N = 1
  if add_N is None:
    add_N = 1
    
  return map(int,(orig_L, del_N, new_L, add_N))

def get_initial_version(first_rev,fn):
  lines = []
  file_started_FL = False
  for line in os.popen('git-show %s %s'%(first_rev,fn)):
    if file_started_FL:
      assert line[0]=='+',("don't recognize format",line)
      lines.append(line[1:]) # take out the leading '+'
    else:
      if line.startswith('@@ -0,0 '):
        file_started_FL=True
  return lines
    
def main():
  fn = sys.argv[1]
  
  # get all revisions
  revs = map(string.strip,os.popen('git-rev-list HEAD -- %s'%fn).readlines())
  revs.insert(0,'HEAD')
  
  # initial version
  LINES=[]
  ALL_LINES=[]
  for line in get_initial_version(revs[-1],fn):
    x = struct()
    x.text    = line
    x.rev_beg = revs[-1]
    LINES.append(x)
    ALL_LINES.append(x)  
  
  # process all the revisions
  orig_L, del_N, new_L, add_N = 0,0,0,0
  for i in range(len(revs)-1):
    cmd = 'git-diff -U0 %s %s %s'%(revs[i+1],revs[i],fn)
    print '[cmd]',cmd
    for line_no,line in enumerate(os.popen(cmd)):
      if line_no<4:
        # skip over the header
        continue
      print 'line',repr(line)
      if line.startswith('@@'):
        orig_L, del_N, new_L, add_N = parse_chunk_header(line)
        print 'chunk',orig_L,del_N,new_L,add_N
        deleted_line = None # this keeps track of last deleted line in chunk
        all_lines_ins_pt = None
      else:
        # PROCESS DELETED LINES
        if del_N:
          assert line.startswith('-'),line
          deleted_line = LINES[new_L-1]
          deleted_line.rev_end = revs[i]
          del LINES[new_L-1]
          del_N -= 1
        # PROCESS ADDED LINES
        else:
          assert del_N == 0, (del_N,"expecting to see all deleted line in diff chunk before any added lines")
          assert line.startswith('+'), ("can't parse this diff chunk, expecting added line, instead got this",line)
          if all_lines_ins_pt == None:
            # figure out where in ALL_LINES we insert new lines
            if new_L == 0: # inserting in beginning file
              all_lines_ins_pt = 0
            else:
              if deleted_line == None:
                # this chunk did not have any deleted lines, find the previous line
                # so that we know where to add the new lines in ALL_LINES
                deleted_line = LINES[new_L-2]
              all_lines_ins_pt = ALL_LINES.index(deleted_line)
          x = struct()
          x.text = line[1:]
          x.rev_beg = revs[i]
          LINES.insert(new_L-1,x)
          ALL_LINES.insert(all_lines_ins_pt,x)
          add_N -= 1
        
    print    
    for line in ALL_LINES:
      print ':',repr(line.text)
    print 
  
if __name__=='__main__':
  main()
